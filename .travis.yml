# Copyright (c) 2017-2021 Petr Vorel <pvorel@suse.cz>

dist: bionic
sudo: required
language: C
services:
    - docker

matrix:
    include:
        # musl
        - os: linux
          env: DISTRO=alpine:latest TSS=tpm2-tss
          compiler: gcc

        # glibc (gcc/clang)
        - os: linux
          env: DISTRO=opensuse/tumbleweed TSS=ibmtss CONTAINER=podman CONTAINER_ARGS="--runtime=/usr/bin/runc"
          compiler: clang

before_install:
    # Tumbleweed requires podman and newest runc due docker incompatible with glibc 2.33 (faccessat2)
    - CONTAINER="${CONTAINER:-docker}"
    - conf="/etc/docker/daemon.json"
    - >
        if [ "$CONTAINER" = "podman" ]; then
            # podman
            . /etc/os-release
            sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
            wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_${VERSION_ID}/Release.key -O- | sudo apt-key add -
            sudo apt update
            sudo apt -y install podman slirp4netns
            conf="/etc/containers/registries.conf"

            # runc
            sudo curl -L https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64 -o /usr/bin/runc
            sudo chmod +x /usr/bin/runc
        fi

    # Docker Hub pull rate limit workaround
    - ls -la $conf || true
    - echo ==== $conf ====; cat $conf || true; echo ==== end $conf ====; echo
    - tmp=$(mktemp)
    - sudo jq '."registry-mirrors" += ["https://mirror.gcr.io"]' $conf > $tmp
    - sudo mv $tmp $conf
    - ls -la $conf || true
    - echo ==== $conf ====; cat $conf || true; echo ==== end $conf ====; echo
    - >
        if [ "$CONTAINER" = "docker" ]; then
            sudo systemctl daemon-reload
            sudo systemctl restart docker
        fi
    - $CONTAINER info

    # ltp
    - DIR="/usr/src/ima-evm-utils"
    - printf "FROM $DISTRO\nRUN mkdir -p $DIR\nWORKDIR $DIR\nCOPY . $DIR\n" > Dockerfile
    - cat Dockerfile
    - $CONTAINER build $CONTAINER_ARGS -t ima-evm-utils .

script:
    - INSTALL="${DISTRO%%:*}"
    - INSTALL="${INSTALL%%/*}"
    - $CONTAINER run $CONTAINER_ARGS -t ima-evm-utils /bin/sh -c "cd travis && if [ \"$VARIANT\" ]; then ARCH=\"$ARCH\" ./$INSTALL.$VARIANT.sh; fi && ARCH=\"$ARCH\" CC=\"$CC\" TSS=\"$TSS\" ./$INSTALL.sh && if [ ! \"$VARIANT\" ]; then which tpm_server || which swtpm || ../tests/install-swtpm.sh; fi && CC=\"$CC\" VARIANT=\"$VARIANT\" ../build.sh"
